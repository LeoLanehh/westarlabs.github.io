<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Z3 &#8211; Westar</title>
	<atom:link href="https://liangpin.ca/westar-demo/tag/z3/feed/" rel="self" type="application/rss+xml" />
	<link>https://liangpin.ca/westar-demo</link>
	<description>Crypto-Native Blockchain Enthusiasts</description>
	<lastBuildDate>Thu, 28 Jul 2022 16:52:44 +0000</lastBuildDate>
	<language>en-CA</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.0.1</generator>

<image>
	<url>https://liangpin.ca/westar-demo/wp-content/uploads/2022/07/cropped-logo-icon-32x32.png</url>
	<title>Z3 &#8211; Westar</title>
	<link>https://liangpin.ca/westar-demo</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Formal verification tools for Move smart contracts</title>
		<link>https://liangpin.ca/westar-demo/formal-verification-tools-for-move-smart-contracts/</link>
		
		<dc:creator><![CDATA[westar-demo]]></dc:creator>
		<pubDate>Wed, 27 Jul 2022 16:10:36 +0000</pubDate>
				<category><![CDATA[Blog StarCoin]]></category>
		<category><![CDATA[blockchain]]></category>
		<category><![CDATA[blog]]></category>
		<category><![CDATA[Boogie program]]></category>
		<category><![CDATA[CVC4]]></category>
		<category><![CDATA[DAO attack]]></category>
		<category><![CDATA[formal vertification]]></category>
		<category><![CDATA[Move]]></category>
		<category><![CDATA[Move smart contracts]]></category>
		<category><![CDATA[smart contract language for linear logic]]></category>
		<category><![CDATA[starcoin]]></category>
		<category><![CDATA[Z3]]></category>
		<guid isPermaLink="false">https://liangpin.ca/westar-demo/?p=978</guid>

					<description><![CDATA[Formal verification tools for Move smart contracts Smart contracts are an area with very high-security requirements, and a small, inadvertent bug could very well lead to incalculable damage. Not long ago the Raven Project broke a very low-level bug [1]: the community developer submitted a small patch with only a few lines of changes that &#8230;<p class="read-more"> <a class="" href="https://liangpin.ca/westar-demo/formal-verification-tools-for-move-smart-contracts/"> <span class="screen-reader-text">Formal verification tools for Move smart contracts</span> Read More &#187;</a></p>]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="978" class="elementor elementor-978">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-70285c8 elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="70285c8" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-e3adb29" data-id="e3adb29" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-2a38003 elementor-widget elementor-widget-heading" data-id="2a38003" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<style>/*! elementor - v3.6.7 - 03-07-2022 */
.elementor-heading-title{padding:0;margin:0;line-height:1}.elementor-widget-heading .elementor-heading-title[class*=elementor-size-]>a{color:inherit;font-size:inherit;line-height:inherit}.elementor-widget-heading .elementor-heading-title.elementor-size-small{font-size:15px}.elementor-widget-heading .elementor-heading-title.elementor-size-medium{font-size:19px}.elementor-widget-heading .elementor-heading-title.elementor-size-large{font-size:29px}.elementor-widget-heading .elementor-heading-title.elementor-size-xl{font-size:39px}.elementor-widget-heading .elementor-heading-title.elementor-size-xxl{font-size:59px}</style><h1 class="elementor-heading-title elementor-size-default">Formal verification tools for Move smart contracts</h1>		</div>
				</div>
				<div class="elementor-element elementor-element-357d514 elementor-widget elementor-widget-text-editor" data-id="357d514" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
			<style>/*! elementor - v3.6.7 - 03-07-2022 */
.elementor-widget-text-editor.elementor-drop-cap-view-stacked .elementor-drop-cap{background-color:#818a91;color:#fff}.elementor-widget-text-editor.elementor-drop-cap-view-framed .elementor-drop-cap{color:#818a91;border:3px solid;background-color:transparent}.elementor-widget-text-editor:not(.elementor-drop-cap-view-default) .elementor-drop-cap{margin-top:8px}.elementor-widget-text-editor:not(.elementor-drop-cap-view-default) .elementor-drop-cap-letter{width:1em;height:1em}.elementor-widget-text-editor .elementor-drop-cap{float:left;text-align:center;line-height:1;font-size:50px}.elementor-widget-text-editor .elementor-drop-cap-letter{display:inline-block}</style>				<p>Smart contracts are an area with very high-security requirements, and a small, inadvertent bug could very well lead to incalculable damage.</p><p>Not long ago the Raven Project broke a very low-level bug [1]: the community developer submitted a small patch with only a few lines of changes that needed to be checked for three cases, and he intentionally left out the third case, which was actually missing an “else”. The core developer accepted the patch without finding the bug, and eventually, the attacker used the vulnerability he submitted to issue 300 million Raven Coin.</p><p>There are numerous examples in the history of smart contract development, the most famous of which is The DAO attack, which directly led to the hard fork of Ether. The main reason for this security attack is that the transfer model used by The DAO project is to transfer funds to the user before modifying the user’s balance status, which allows the attacker to construct a malicious contract to recursively call the project’s transfer function while accepting the transfer, causing the user’s balance status to keep withdrawing the project’s funds without being changed.</p><p>Is there no better solution to deal with bugs in smart contracts than to enhance testing? There is a solution — Formal verification.</p><p>Formal verification is not a new technology, it has actually existed for 30 or 40 years and is mainly used in the military, aerospace, and other fields with high requirements for system security. It is a mathematical and logic-based approach that can effectively detect the existence of security vulnerabilities in a program by rigorously proving the correctness of the code by mathematical means before it is deployed. Compared with the traditional means of finding code vulnerabilities by manual means, formal verification can solve the defect that manual means cannot exhaust all possible inputs.</p>						</div>
				</div>
				<div class="elementor-element elementor-element-0de72cc elementor-widget elementor-widget-image" data-id="0de72cc" data-element_type="widget" data-widget_type="image.default">
				<div class="elementor-widget-container">
			<style>/*! elementor - v3.6.7 - 03-07-2022 */
.elementor-widget-image{text-align:center}.elementor-widget-image a{display:inline-block}.elementor-widget-image a img[src$=".svg"]{width:48px}.elementor-widget-image img{vertical-align:middle;display:inline-block}</style>												<img width="512" height="218" src="https://liangpin.ca/westar-demo/wp-content/uploads/2022/07/formal-vertification.png" class="attachment-large size-large" alt="" loading="lazy" srcset="https://liangpin.ca/westar-demo/wp-content/uploads/2022/07/formal-vertification.png 512w, https://liangpin.ca/westar-demo/wp-content/uploads/2022/07/formal-vertification-300x128.png 300w" sizes="(max-width: 512px) 100vw, 512px" />															</div>
				</div>
				<div class="elementor-element elementor-element-2538b0b elementor-widget elementor-widget-text-editor" data-id="2538b0b" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<p>Note: The picture is from the internet, the exact source is not found, we would like to express our thanks to the author of the picture!</p>						</div>
				</div>
				<div class="elementor-element elementor-element-30e43ae elementor-widget elementor-widget-text-editor" data-id="30e43ae" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<p>The security features of the Move language can be divided into three levels: the language level, the virtual machine level, and the tool level.</p><p>The language level has a Rust-like ownership system, a strong data abstraction with Module-script, and assets as first-class citizens; the virtual machine level has a Java-like bytecode verifier, and the tool level provides a formal verification tool based on Boogie.</p><p>Move’s formal verification tool, called Move Prover, is based on the idea of verifying that a program conforms to a specification by means of an automatic theorem-proving solver in the formal verification domain. Move defines its own specification language, called Move specification language, which describes how a program should run correctly through preconditions, postconditions, invariants, and so on. A Move to boogie compiler then converts the Move program and specification into a boogie program, an intermediate verification language with formal semantics.</p>						</div>
				</div>
				<div class="elementor-element elementor-element-5068ee1 elementor-widget elementor-widget-image" data-id="5068ee1" data-element_type="widget" data-widget_type="image.default">
				<div class="elementor-widget-container">
															<img width="423" height="235" src="https://liangpin.ca/westar-demo/wp-content/uploads/2022/07/boogie-program.png" class="attachment-large size-large" alt="" loading="lazy" srcset="https://liangpin.ca/westar-demo/wp-content/uploads/2022/07/boogie-program.png 423w, https://liangpin.ca/westar-demo/wp-content/uploads/2022/07/boogie-program-300x167.png 300w" sizes="(max-width: 423px) 100vw, 423px" />															</div>
				</div>
				<div class="elementor-element elementor-element-aa5a0ca elementor-widget elementor-widget-text-editor" data-id="aa5a0ca" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<p>Boogie was developed by Microsoft and it has two layers. First, it is an intermediate verification language with formal semantics, designed to build program verifiers for other languages. Several program verifiers have been built based on the Boogie language, the more famous ones include VCC and HAVOC verifiers for C language. Also, Boogie is the name of the tool. The tool accepts the Boogie language as input, generates verification conditions, and passes them to the automatic theorem proving solvers Z3 or CVC4. The default solver is Z3, which is an SMT (Satisfiability Modulo Theories ) solver. Satisfiability Modulo Theories belong to the category of logic and are simply understood to give a final result, either the input program meets the given specification or it does not. A specific path is given when it does not.</p><p>Here is an example in Figure 1.0 to see how to find hidden bugs in the program by Move prover. This arithmetic() method calculates the sum of two 64-bit unsigned integers x and y, then divides by x and returns the result. At first glance, there is nothing wrong with this method, but in fact, it hides two bugs, overflow, and division by zero. The spec fun of the same name at the bottom is a specification written in the Move specification language. It specifies all possible exception exit paths for arithmetic() through two aborts_if conditional statements. The first aborts_if describes an exit due to an overflow, and the second aborts_if describes an abnormal exit with a divisor of 0. Assuming you didn’t know at first that arithmetic() could possibly exit abnormally, and spec fun arithmetic doesn’t include any abort_if conditions, then you run move prover and the result will show that there are paths to exit abnormally that are not included in the specification, and will detail the paths to exit abnormally for both of the above. After seeing these hints, you know you need to modify the arithmetic() method to add judgments for overflow and division by 0.</p>						</div>
				</div>
				<div class="elementor-element elementor-element-27aca08 elementor-widget elementor-widget-image" data-id="27aca08" data-element_type="widget" data-widget_type="image.default">
				<div class="elementor-widget-container">
															<img width="444" height="144" src="https://liangpin.ca/westar-demo/wp-content/uploads/2022/07/move-program.png" class="attachment-large size-large" alt="" loading="lazy" srcset="https://liangpin.ca/westar-demo/wp-content/uploads/2022/07/move-program.png 444w, https://liangpin.ca/westar-demo/wp-content/uploads/2022/07/move-program-300x97.png 300w" sizes="(max-width: 444px) 100vw, 444px" />															</div>
				</div>
				<div class="elementor-element elementor-element-5bbfa35 elementor-widget elementor-widget-text-editor" data-id="5bbfa35" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<p>Figure 1.0</p>						</div>
				</div>
				<div class="elementor-element elementor-element-65d1166 elementor-widget elementor-widget-text-editor" data-id="65d1166" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<p>Let’s look at another example in Figure 2.0. If you know anything about the Move language, you know that Move provides a special bytecode for moving resources. The following Move method moves a resource of type R out from under address a, and then repackages it under the sender’s address. This method has two exception exit paths, one path is that there is no R resource under address a, and the other path is that if the sender is not equal to a, there is already another R resource under the sender. If the sender is equal to a, there will be no problem because there is no problem moving R out from under the sender and back into the sender. If the sender is not equal to a, there will be a problem because the Move language specifies that only one resource of the same type can be stored under an address, and there is already a resource of type R under the sender, which creates a conflict. If the exit condition on lines 11 or 12 is removed, move prover reports that there is an exception exit path not covered by the specification. The developer can then modify the program to add these two conditional judgments based on the specific paths.</p>						</div>
				</div>
				<div class="elementor-element elementor-element-414d28f elementor-widget elementor-widget-image" data-id="414d28f" data-element_type="widget" data-widget_type="image.default">
				<div class="elementor-widget-container">
															<img width="486" height="237" src="https://liangpin.ca/westar-demo/wp-content/uploads/2022/07/Move-language.png" class="attachment-large size-large" alt="" loading="lazy" srcset="https://liangpin.ca/westar-demo/wp-content/uploads/2022/07/Move-language.png 486w, https://liangpin.ca/westar-demo/wp-content/uploads/2022/07/Move-language-300x146.png 300w" sizes="(max-width: 486px) 100vw, 486px" />															</div>
				</div>
				<div class="elementor-element elementor-element-10fd88e elementor-widget elementor-widget-text-editor" data-id="10fd88e" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<p>Figure 2.0</p>						</div>
				</div>
				<div class="elementor-element elementor-element-4362b16 elementor-widget elementor-widget-text-editor" data-id="4362b16" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<p>The two examples above give a general idea of how Move prover is used, and detailed instructions can be found in the documentation accompanying the Libra code [2]. As mentioned in the Move whitepaper, Move’s long-term goal is to build a culture of “correctness” where the first thing a user does to understand the functionality of a contract is to look at its specifications. Ideally, Move programmers would not use a contract that has not been formally validated. However, the challenges of trying to achieve this goal are significant. The formal validation tool requires the user to understand the logic of the program in detail and then communicate it to the validation system in the form of a specification; whether the validation tool is accurate and intuitive, whether the specification is modular and reusable, and whether the readability is good enough are all challenges for the formal validation tool. programming.</p>						</div>
				</div>
				<div class="elementor-element elementor-element-f5fea14 elementor-widget elementor-widget-text-editor" data-id="f5fea14" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<p>This article is written by Guangyuz Zhu (<a href="https://twitter.com/guangyuz" target="_blank" rel="noopener">@guangyuz</a>), a blockchain enthusiast and former JVM expert at Alibaba. He is now working at Westar Labs, doing research on smart contract programming language, security, and scalability.</p>						</div>
				</div>
				<div class="elementor-element elementor-element-1316e8f elementor-widget elementor-widget-text-editor" data-id="1316e8f" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<p>Reference article:</p><ol class="ol1"><li class="li1"><span class="s1"><a href="https://github.com/ravenproject/ravencoin/commit/d23f862a6afc17092ae31b67d96bc2738fe917d2" target="_blank" rel="noopener"><span class="s2">https://github.com/ravenproject/ravencoin/commit/d23f862a6afc17092ae31b67d96bc2738fe917d2</span></a></span></li><li class="li2"><span class="s1"><a href="https://github.com/libra/libra/tree/master/language/move-prover/doc/user" target="_blank" rel="noopener"><span class="s2">https://github.com/libra/libra/tree/master/language/move-prover/doc/user</span></a></span></li></ol>						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
							</div>
		]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
